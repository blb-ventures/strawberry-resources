[tool.poetry]
name = "strawberry-resources"
version = "0.11.0"
description = "Introspection utilities to extract data from strawberry graphql"
authors = ["Thiago Bellini Ribeiro <thiago@bellini.dev>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/blb-ventures/strawberry-resources"
repository = "https://github.com/blb-ventures/strawberry-resources"
documentation = "https://github.com/blb-ventures/strawberry-resources"
keywords = ["strawberry", "django", "graphql", "resources", "forms"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
packages = [{ include = "strawberry_resources" }]
include = ["strawberry_resources/py.typed"]

[tool.poetry.scripts]
strawberry_resources = "strawberry_resources.cli:run"

[tool.poetry.dependencies]
python = "^3.8"
strawberry-graphql = ">= 0.236.0"
strawberry-graphql-django = { version = ">=0.47.0", optional = true }
django = { version = ">=3.2", optional = true }
django-choices-field = { version = ">=2.0", optional = true }
typing-extensions = ">= 4.2.0"
click = ">=8.1.3"

[tool.poetry.group.dev.dependencies]
strawberry-graphql-django = "^0.47.0"
django = "^4.1.0"
django-choices-field = "^2.0"
django-types = "^0.19.1"
django-phonenumber-field = "^7.0.0"
codecov = "^2.1.12"
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
ipython = "^8.4.0"
pytest-asyncio = "^0.24.0"
ruff = "^0.6.9"
pytest-django = "^4.5.2"

[tool.poetry.extras]
django = ["django", "strawberry-graphql-django", "django-choices-field"]

[tool.ruff]
target-version = "py38"
preview = true

[tool.ruff.lint]
extend-select = [
  "A",
  "ASYNC",
  "B",
  "BLE",
  "C4",
  "COM",
  "D",
  "D2",
  "D3",
  "D4",
  "DTZ",
  "E",
  "ERA",
  "EXE",
  "F",
  "FURB",
  "G",
  "I",
  "ICN001",
  "INP",
  "ISC",
  "N",
  "PERF",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "SLOT",
  "T10",
  "T20",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
]
extend-ignore = [
  "D1",
  "D203",
  "D213",
  "D417",
  "E203",
  "PGH003",
  "PLR09",
  "SLF001",
  "TRY003",
  "PLR6301",
  "PLC0415",
  # ruff formatter recommends to disable those
  "COM812",
  "COM819",
  "D206",
  "E111",
  "E114",
  "E117",
  "E501",
  "ISC001",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "W191",
]
exclude = [
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".tox",
  ".venv",
  "__pycached__",
  "_build",
  "buck-out",
  "build",
  "dist",
]

[tool.ruff.lint.per-file-ignores]
"*/types.py" = ["A005"]
"*/inspect.py" = ["A005"]

[tool.ruff.lint.pylint]
max-nested-blocks = 7

[tool.ruff.lint.isort]

[tool.ruff.format]

[tool.pyright]
pythonVersion = "3.8"
useLibraryCodeForTypes = true
exclude = [".venv", "**/migrations", "dist", "docs"]
reportCallInDefaultInitializer = "warning"
reportMatchNotExhaustive = "warning"
reportMissingSuperCall = "warning"
reportOverlappingOverload = "warning"
reportUninitializedInstanceVariable = "none"
reportUnnecessaryCast = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportUntypedNamedTuple = "error"
reportUnusedExpression = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
strictDictionaryInference = true
strictListInference = true
strictSetInference = true

[tool.pytest.ini_options]
python_files = "tests/test_*.py"
DJANGO_SETTINGS_MODULE = "tests.django_settings"
addopts = "-p no:warnings --cov=./ --cov-report term-missing:skip-covered"
asyncio_mode = "auto"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
